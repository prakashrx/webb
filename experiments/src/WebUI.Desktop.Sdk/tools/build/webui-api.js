let e=null;function t(){if(!e){const t=window.chrome?.webview?.hostObjects?.sync?.api;if(!t)throw new Error("WebUI bridge not available. Make sure this code is running in a WebView2 context.");e=t}return e}function n(){return!!window.chrome?.webview?.hostObjects?.sync?.api}const o=new Map;let r=!1;async function i(e,n){!r&&window.chrome?.webview?.addEventListener&&(window.chrome.webview.addEventListener("message",e=>{const t=e.data;if(t&&t.id){const e=o.get(t.id);e&&(clearTimeout(e.timeout),o.delete(t.id),t.error?e.reject(new Error(t.error)):e.resolve(t.result))}}),r=!0);const i=t(),s=`${Date.now()}-${Math.random().toString(36).substr(2,9)}`;return new Promise((t,r)=>{const c=setTimeout(()=>{o.delete(s),r(new Error(`Command '${e}' timed out after 30 seconds`))},3e4);o.set(s,{resolve:t,reject:r,timeout:c});try{const t={id:s,command:e,args:n};i.Core.InvokeCommand(e,JSON.stringify(t))}catch(e){clearTimeout(c),o.delete(s),r(e)}})}const s="1.0.0";export{i as invoke,n as isAvailable,s as version};
//# sourceMappingURL=webui-api.bundle.js.map
